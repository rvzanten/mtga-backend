// Code generated by protoc-gen-grpc-gateway
// source: proto/OTSthingy.proto
// DO NOT EDIT!

/*
Package OTSthingy is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package OTSthingy

import (
	"io"
	"net/http"

	"github.com/golang/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/utilities"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
)

var _ codes.Code
var _ io.Reader
var _ = runtime.String
var _ = utilities.NewDoubleArray

// RegisterTimestampHandlerFromEndpoint is same as RegisterTimestampHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterTimestampHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Printf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Printf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterTimestampHandler(ctx, mux, conn)
}

// RegisterTimestampHandler registers the http handlers for service Timestamp to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterTimestampHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	client := NewTimestampClient(conn)

	return nil
}

var ()

var ()
